package main

import (
	"fmt"
	"log/slog"

	"{{.ProjectName}}/config"
	"{{.ProjectName}}/database"

	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		slog.Error("failed to load config: ", "error", err)
		return
	}

	// Connect Postgres
	pg, err := database.NewPostgresDatabase(cfg)
	if err != nil {
		slog.Error("failed to load config: ", "error", err)
		return
	}
	slog.Info("Postgres database connected successfully")

	// Create a new Echo instance
	e := echo.New()

	// Middleware
	e.Use(middleware.CORSWithConfig(config.Cors()))
	e.Use(middleware.Secure())
	e.Use(config.CustomLogger())
	e.Use(middleware.Recover())
	e.Validator = &config.CustomValidator{Validator: validator.New()}

	// Routes
	e.GET("/", func(c echo.Context) error {
		return c.JSON(200, echo.Map{"message": "Hello, World!", "database_name": pg.Name})
	})

	// Start server using the port from the configuration
	serverAddress := fmt.Sprintf(":%d", cfg.Server.Port)
	e.Logger.Fatal(e.Start(serverAddress))
}
